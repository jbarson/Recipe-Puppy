{"ast":null,"code":"var _jsxFileName = \"/Users/jbarson/Projects/canvass/puppy/src/components/RecipeList.jsx\";\nimport React from 'react';\n\nclass RecipeList extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      error: null,\n      isLoaded: false,\n      items: []\n    };\n  }\n\n  componentDidMount() {\n    fetch(\"http://www.recipepuppy.com/api/?i=onions,garlic&q=omelet\").then(res => res.json()).then(result => {\n      this.setState({\n        isLoaded: true,\n        items: result.results\n      });\n    }, // Note: it's important to handle errors here\n    // instead of a catch() block so that we don't swallow\n    // exceptions from actual bugs in components.\n    error => {\n      this.setState({\n        isLoaded: true,\n        error\n      });\n    });\n  }\n\n  render() {\n    const {\n      error,\n      isLoaded,\n      items\n    } = this.state;\n\n    if (error) {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 38\n        },\n        __self: this\n      }, \"Error: \", error.message);\n    } else if (!isLoaded) {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 40\n        },\n        __self: this\n      }, \"Loading...\");\n    } else {\n      return React.createElement(\"ul\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 43\n        },\n        __self: this\n      }, items.map(item => React.createElement(\"li\", {\n        key: item.title,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 45\n        },\n        __self: this\n      }, React.createElement(\"a\", {\n        href: item.href,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 46\n        },\n        __self: this\n      }, item.title), item.thumbnail && React.createElement(\"img\", {\n        src: item.thumbnail,\n        alt: item.title,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 48\n        },\n        __self: this\n      }), item.ingredients.map(ingredient => React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 50\n        },\n        __self: this\n      }, ingredient)))));\n    }\n  }\n\n}\n\nexport default RecipeList;","map":{"version":3,"sources":["/Users/jbarson/Projects/canvass/puppy/src/components/RecipeList.jsx"],"names":["React","RecipeList","Component","constructor","props","state","error","isLoaded","items","componentDidMount","fetch","then","res","json","result","setState","results","render","message","map","item","title","href","thumbnail","ingredients","ingredient"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;;AAEA,MAAMC,UAAN,SAAyBD,KAAK,CAACE,SAA/B,CAAyC;AACvCC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AACXC,MAAAA,KAAK,EAAE,IADI;AAEXC,MAAAA,QAAQ,EAAE,KAFC;AAGXC,MAAAA,KAAK,EAAE;AAHI,KAAb;AAKD;;AAEDC,EAAAA,iBAAiB,GAAG;AAClBC,IAAAA,KAAK,CAAC,0DAAD,CAAL,CACGC,IADH,CACQC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EADf,EAEGF,IAFH,CAGKG,MAAD,IAAY;AACV,WAAKC,QAAL,CAAc;AACZR,QAAAA,QAAQ,EAAE,IADE;AAEZC,QAAAA,KAAK,EAAEM,MAAM,CAACE;AAFF,OAAd;AAID,KARL,EASI;AACA;AACA;AACCV,IAAAA,KAAD,IAAW;AACT,WAAKS,QAAL,CAAc;AACZR,QAAAA,QAAQ,EAAE,IADE;AAEZD,QAAAA;AAFY,OAAd;AAID,KAjBL;AAmBD;;AAEDW,EAAAA,MAAM,GAAG;AACP,UAAM;AAAEX,MAAAA,KAAF;AAASC,MAAAA,QAAT;AAAmBC,MAAAA;AAAnB,QAA6B,KAAKH,KAAxC;;AACA,QAAIC,KAAJ,EAAW;AACT,aAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAaA,KAAK,CAACY,OAAnB,CAAP;AACD,KAFD,MAEO,IAAI,CAACX,QAAL,EAAe;AACpB,aAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAAP;AACD,KAFM,MAEA;AACL,aACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACGC,KAAK,CAACW,GAAN,CAAUC,IAAI,IACb;AAAI,QAAA,GAAG,EAAEA,IAAI,CAACC,KAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAG,QAAA,IAAI,EAAED,IAAI,CAACE,IAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAqBF,IAAI,CAACC,KAA1B,CADF,EAEGD,IAAI,CAACG,SAAL,IACC;AAAK,QAAA,GAAG,EAAEH,IAAI,CAACG,SAAf;AAA0B,QAAA,GAAG,EAAEH,IAAI,CAACC,KAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAHJ,EAKGD,IAAI,CAACI,WAAL,CAAiBL,GAAjB,CAAqBM,UAAU,IAAK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAIA,UAAJ,CAApC,CALH,CADD,CADH,CADF;AAcD;AACF;;AAtDsC;;AAyDzC,eAAexB,UAAf","sourcesContent":["import React from 'react';\n\nclass RecipeList extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      error: null,\n      isLoaded: false,\n      items: []\n    };\n  }\n\n  componentDidMount() {\n    fetch(\"http://www.recipepuppy.com/api/?i=onions,garlic&q=omelet\")\n      .then(res => res.json())\n      .then(\n        (result) => {\n          this.setState({\n            isLoaded: true,\n            items: result.results\n          });\n        },\n        // Note: it's important to handle errors here\n        // instead of a catch() block so that we don't swallow\n        // exceptions from actual bugs in components.\n        (error) => {\n          this.setState({\n            isLoaded: true,\n            error\n          });\n        }\n      )\n  }\n\n  render() {\n    const { error, isLoaded, items } = this.state;\n    if (error) {\n      return <div>Error: {error.message}</div>;\n    } else if (!isLoaded) {\n      return <div>Loading...</div>;\n    } else {\n      return (\n        <ul>\n          {items.map(item => (\n            <li key={item.title}>\n              <a href={item.href}>{item.title}</a>\n              {item.thumbnail &&\n                <img src={item.thumbnail} alt={item.title}/>\n              }\n              {item.ingredients.map(ingredient => (<p>{ingredient}</p>))}\n              \n            </li>\n          ))}\n        </ul>\n      );\n    }\n  }\n}\n\nexport default RecipeList"]},"metadata":{},"sourceType":"module"}